#!/usr/bin/env python
# coding: utf-8

# <div class="alert alert-success">
# <b>Комментарий ревьюера v 3.0 ✔️:</b> Отлично, Сергей! Ты здорово поработал над комментариями и теперь твой проект принят.
#     
# Спасибо за работу и успехов в следующих проектах!)

# <div style="border:solid green 2px; padding: 20px">
# <b>Привет!</b>
# 
# Меня зовут Михаленко Дмитрий, и я буду проверять твой проект. Предлагаю общаться на «ты» :) Но если это не удобно - дай знать, и мы перейдем на "вы". 
# 
# Моя основная цель — не указать на совершенные тобою ошибки, а поделиться своим опытом и помочь тебе стать аналитиком данных. Ты уже проделал большую работу над проектом, но давай сделаем его еще лучше. Ниже ты найдешь мои комментарии - **пожалуйста, не перемещай, не изменяй и не удаляй их**. Увидев у тебя ошибку, в первый раз я лишь укажу на ее наличие и дам тебе возможность самому найти и исправить ее. На реальной работе твой начальник будет поступать так же, а я пытаюсь подготовить тебя именно к работе аналитиком. Но если ты пока не справишься с такой задачей - при следующей проверке я дам более точную подсказку. Я буду использовать цветовую разметку:
# 
# <div class="alert alert-danger">
# <b>Комментарий ревьюера ❌:</b> Так выделены самые важные замечания. Без их отработки проект не будет принят. </div>
# 
# <div class="alert alert-warning">
# <b>Комментарий ревьюера ⚠️:</b> Так выделены небольшие замечания. Я надеюсь, что их ты тоже учтешь - твой проект от этого станет только лучше. Но настаивать на их отработке не буду.
# 
# </div>
# 
# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Так я выделяю все остальные комментарии.</div>
# 
# Давай работать над проектом в диалоге: **если ты что-то меняешь в проекте или отвечаешь на мои комментарии — пиши об этом.** Мне будет легче отследить изменения, если ты выделишь свои комментарии:
# <div class="alert alert-info"> <b>Комментарий студента:</b> Например, вот так.</div>
# 
# Всё это поможет выполнить повторную проверку твоего проекта оперативнее. 

# # Исследование объявлений о продаже квартир
# 
# В вашем распоряжении данные сервиса Яндекс.Недвижимость — архив объявлений о продаже квартир в Санкт-Петербурге и соседних населённых пунктов за несколько лет. Нужно научиться определять рыночную стоимость объектов недвижимости. Ваша задача — установить параметры. Это позволит построить автоматизированную систему: она отследит аномалии и мошенническую деятельность. 
# 
# По каждой квартире на продажу доступны два вида данных. Первые вписаны пользователем, вторые — получены автоматически на основе картографических данных. Например, расстояние до центра, аэропорта, ближайшего парка и водоёма. 

# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Объёмная и творческая аналитическая задача, тем интереснее будет с ней справиться! </div>

# ### Откройте файл с данными и изучите общую информацию. 

# In[1]:


import pandas as pd

data = pd.read_csv('/datasets/real_estate_data.csv', sep='\t') # открываем файл с данными
data.info() # получаем информацию о типах данных
data.isna().sum() # количество пропущенных значений 


# In[2]:


data.describe()


# 
# По полученным данным набросаем план обработки:
# - first_day_exposition   (переведем в datetime) 
# - ceiling_height (пропуски)
# - floors_total (перевод в int)
# - is_apartment (много пропусков и надо заменить на тип данных bool) 
# - balcony  (перевод в int и пропуски)
# - kitchen_area (пропуски)
# - living_area (пропуски)
# - airports_nearest  (пропуски)
# - cityCenters_nearest  (пропуски)
# - parks_around3000  (перевод в int)
# - parks_nearest  (пропуски)
# - ponds_around3000   (перевод в int)
# - ponds_nearest  (пропуски)
# - days_exposition   (перевод в int и пропуски)
# 

# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Отлично </div>

# In[3]:


data.head(20)


# In[4]:


data.hist(figsize=(15, 20))


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Хорошее начало, так держать. </div>

# ### Предобработка данных

# In[5]:


data.columns


# In[6]:


data['first_day_exposition'] = pd.to_datetime(data['first_day_exposition'], format = '%Y/%m/%d') #переводим в формат даты без времени, так как время в объявлениях не указано


# In[ ]:





# In[ ]:





# In[7]:


data['ceiling_height'] = data['ceiling_height'].fillna(data['ceiling_height'].median()) 


# <div class="alert alert-warning">
# <b>Комментарий ревьюера ⚠️:</b> Лучше было бы воспользоваться медианой, так бы мы повысили автоматизацию и сама медиана не привязана к выбросам </div>

# In[8]:


data['floor'] = data['floor'].astype('int') # переводим данные по этажам в целые числа


# In[9]:



data['is_apartment'] = data['is_apartment'].fillna(False) 


# замена пропусков на false, так как я думаю, что люди,  которые продают апартаменты указали это,  а если продавец не указал ничего, вероятно он не был уверен в понятии апартамена
# 

# <div class="alert alert-warning">
# <b>Комментарий ревьюера ⚠️:</b> Также сами решения по данным лучше оформлять в ячейках markdown, комментарии в коде больше предназначены для пояснения самого кода </div>

# In[10]:


data['balcony'] = data['balcony'].fillna(0) # замена пропуском на число 0. Есди продавец не указал наличие балконов, 
                                            # то скорее всего они отсутствуют
data['balcony'] = data['balcony'].astype('int') # Переводим в целые числа, чтобы не было 3/4 балкона   


# In[11]:


kitchen_coeff = data['kitchen_area'].mean() / data['total_area'].mean() # Средний кухонный коэффициент
data['kitchen_area'] = data['kitchen_area'].fillna(kitchen_coeff * data['total_area'].mean()) # замена пропусков средними значениями
 


# In[12]:


living_coeff = data['living_area'].mean() / data['total_area'].mean() # Средний коэффициент жилой площади
data['living_area'] = data['living_area'].fillna(kitchen_coeff * data['total_area'].mean()) # замена пропусков средними значениями


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Воспользуемся коэффициентами. </div>

# In[13]:


data['parks_around3000'] = data['parks_around3000'].fillna(0).astype(int) # Если данные по количеству не указаны продавцом,
                                                                         # то скорее всего этого нет
data['ponds_around3000'] = data['ponds_around3000'].fillna(0).astype(int)# Если данные по количеству не указаны продавцом,
                                                                              # то скорее всего этого нет


# In[14]:


data.isna().sum() # проверяем количетсво пропуском 


# In[15]:


data = data.dropna(subset = ['locality_name'])


# In[16]:


data = data.dropna(subset = ['floors_total'])


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Да, их можно просто отбросить </div>

# In[17]:


data.isna().sum()


# Что делать с пропусками в столбцах, где указано расстояние от объектов, я не знаю(
# 

# In[18]:


data.describe()


# In[19]:


data['locality_name'] = data['locality_name'].str.lower()
data['locality_name'] = data['locality_name'].str.replace('посёлок', 'поселок')
data['locality_name'].unique()


# <div class="alert alert-success">
# <b>Комментарий ревьюера v 2.0 ✔️:</b> е-ё это правда основная проблема

# In[20]:


data = data.loc[(data['ceiling_height'] > 2) & (data['ceiling_height'] < 15) ]


# Нужно ли убрать из таблицы еще какие нибудь значения? Честно говоря значения типа 19 комнат выглядят странно, но как мне кажется вполне реальны на рынке недвижимости, это может быть загородный дом или этаж из соединенных квартир.

# <div class="alert alert-warning">
# <b>Комментарий ревьюера v 2.0 ⚠️:</b> Лучше было бы обработать нижнюю границу цены, едва-ли цена может быть 12190 и например расстояние до аэропорта тоже маловероятно может быть равно нулю)

# In[21]:


data.describe()


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Вполне оправданно будет ничего не делать, в конечном итоге мы не можем достоверно восстановить эти данные, но если хочешь можно например заменить заглушками </div>

# <div class="alert alert-danger">
# <b>Комментарий ревьюера ❌:</b> Но обрати внимание, что по ТЗ также нужно было обработать неявные дубликаты в названиях, достаточно будет хотя бы обработать разное использование е-ё.
#     
# Также, в датасете осталось достаточно много аномальных значений, посоветую воспользоваться describe по всему датасету и посмотреть на min и max, так аномалии будет найти легче

# ### Посчитайте и добавьте в таблицу новые столбцы

# In[22]:


data['sqr_metre_price'] = data['last_price'] / data['total_area'] # стоимость квадратного метра
data['sqr_metre_price'].head()


# In[23]:


data['weekday'] = data['first_day_exposition'].dt.weekday
data['month'] = data['first_day_exposition'].dt.month
data['year'] = data['first_day_exposition'].dt.year


# In[24]:


def floor_group(row):
    if row['floor'] == 1:
        return 'первый'
    elif row['floor'] == row['floors_total']:
        return 'последний'
    else:
        return 'другой'
data['floor_type'] = data.apply(floor_group, axis=1)


# In[25]:


data['cityCenters_nearest'] = data['cityCenters_nearest'].fillna(0)
data['cityCenters_nearest_km'] = data['cityCenters_nearest'] / 1000 
data['cityCenters_nearest_km'] = data['cityCenters_nearest_km'].astype('int')
data['cityCenters_nearest_km'].head()


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Великолепно, все пункты задания выполнены в полном объёме

# ### Проведите исследовательский анализ данных

# In[26]:


data.plot(y = 'total_area', kind = 'hist', bins = 100, grid=True, figsize = (5,3), range = (0,500), title ='Общая площадь')
data['total_area'].describe()


# По полученным данным получили нормальное распределение. Большинство квартир имеют площадь до 100 кв.м, есть единичные выбивающиеся значения, но они не влияют на анализ

# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Хорошо одну за одной строишь гистограммы по необходимым параметрам

# In[27]:


data.plot(y = 'living_area', kind = 'hist', bins = 100, grid=True, figsize = (5,3), range = (0,300), title ='Жилая площадь')
data['living_area'].describe()


# Нормальное распределение данных. Средняя жилая площадь около 32 кв.м.

# <div class="alert alert-warning">
# <b>Комментарий ревьюера ⚠️:</b> Могу посоветовать посмотреть данные материалы, чтобы научиться оформлять графики еще лучше:
# 
# [Здесь](https://pyprog.pro/mpl/mpl_title.html)
#   
# [И здесь](https://pyprog.pro/mpl/mpl_axis_signatures.html)
#     
# [И вот тут](https://www.python-graph-gallery.com)
#     
#    

# In[28]:


data.plot(y = 'kitchen_area', kind = 'hist', bins = 100, grid=True, figsize = (5,3), range = (0,80), title ='Площадь кухни')
data['kitchen_area'].describe()


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Хорошо

# Нормальное распределение данных. Средняя кухонная площадь около 10 кв.м.

# In[29]:


data.plot(y = 'last_price', kind = 'hist', bins = 100, grid=True, figsize = (5,3), range = (0,20000000), title ='Стоимость квартиры')
data['last_price'].describe()


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Но посмотри на нижнюю границу, похожа-ли она на правду?

# Нормальное распределение данных. Средняя стоимость квартиры 6,5 миллионов. Есть значения свыше 20 миллионов, но они единичны

# In[30]:


data.plot(y = 'rooms', kind = 'hist', bins = 100, grid=True, figsize = (5,3), range = (0,10), title ='Количество комнат')
data['rooms'].describe()


# <div class="alert alert-warning">
# <b>Комментарий ревьюера ⚠️:</b> Неплохо было бы посмотреть на эту строку подробнее

# Данные в порядке, среднее количество комнат 2, хотя есть и выбивающиеся значения, а именно 19 комнат.

# In[31]:


data.plot(y = 'ceiling_height', kind = 'hist', bins = 100, grid=True, figsize = (5,3), range = (2,4), title ='Высота потолков')
data['ceiling_height'].describe()


# <div class="alert alert-warning">
# <b>Комментарий ревьюера ⚠️:</b> Здесь очевидно также нужна обработка аномалий, 1-метровый и 100-метровый потолок едва-ли может существовать

# Средняя высота потолков 2,7 метра.

# In[32]:


data.plot(y = 'floors_total', kind = 'hist', bins = 100, grid=True, figsize = (5,3), range = (0,40), title ='Этажность')
data['floors_total'].describe()


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Типовые дома тут выделяются

# Средняя этажность домов, гдк выставлены квартиры на продажу - 10 этажей

# In[33]:


data['floor_type'].value_counts()


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Логично

# Основное количетсво квартир выставленых на продажу, находятся ни на первом, ни на последнем этаже

# In[34]:


data.plot(y = 'floor', kind = 'hist', bins = 100, grid=True, figsize = (5,3), range = (0,33), title ='Этаж квартиры')
data['floor'].describe()


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> В основном застройка низкоэтажная

# В основном квартиры продаются на невысоких этажах, что связано с этажностью построек в городе Санкт-Петербург.

# In[35]:


data.plot(y = 'cityCenters_nearest', kind = 'hist', bins = 100, grid=True, figsize = (5,3), range = (1,20000), title ='Расстояние до центра')
data['cityCenters_nearest'].describe()


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Похже на правду

# Исключил из графика нулевые значения, которые сам же и создал и получилось нормальное распределение. Среднее расстояние до центра свыше 10 км.

# In[36]:


data.plot(y = 'airports_nearest', kind = 'hist', bins = 100, grid=True, figsize = (5,3), range = (0,80000), title ='Расстояние до аэропорта')
data['airports_nearest'].describe()


# Нормальное распределение данных, ближайшие аэропорты находятся в 30 км. в среднем.

# In[37]:


data.plot(y = 'parks_nearest', kind = 'hist', bins = 100, grid=True, figsize = (5,3), range = (0,3000), title ='Расстояние до парка')
data['parks_nearest'].describe()


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Все параметры удаленности разобраны

# в среднем парке находятся в радиусе 500 метров от продаваемых квартир.
# 

# In[38]:


data.plot(y = 'weekday', kind = 'hist', bins = 100, grid=True, figsize = (5,3), range = (0,6), title ='День недели создания объявления')
data['weekday'].describe()


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> На выходных объявлений меньше

# В будние создается больше объявления о продаже, чем в выходные. Больше всего во вторник и четверг.

# In[39]:


data.plot(y = 'month',kind = 'hist',  bins = 100, grid=True, figsize = (5,3), range = (0,12), title ='Месяц создания объявления')
data['month'].describe()


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Временные показатели также проанализированы

# Больше всего объявлений создается в марте, причина неизвестна.

# ### Общий вывод

# In[40]:


import matplotlib.pyplot as plt
print('Время продажи (медиана):', round(data.query('days_exposition != 0')['days_exposition'].median()),'\n')
print('Время продажи (среднее):', round(data.query('days_exposition != 0')['days_exposition'].mean()),'\n')
plt.hist(data.query('days_exposition != 0')['days_exposition'], bins=100, range=(0,250))
plt.title('Время продажи')
plt.xlabel('Дни')
plt.ylabel('Количество квартир')
plt.show()
data.query('days_exposition != 0')['days_exposition'].describe()


# Медианное значение продажи квартиры - 95, а среднее -181. Большее количество квартир в пероиод до 100 дней. Быстрой продажей можно считать квартиры проданные за 45 дней и быстрее, а не обычно долгими 200 и более.
# 
# 

# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Отлично установлены границы days_exposition

# In[41]:



data.pivot_table(index='total_area', values='last_price').plot(grid=True, style='o', figsize=(5, 5))
plt.show()
data['total_area'].corr(data['last_price'])


# <div class="alert alert-danger">
# <b>Комментарий ревьюера ❌:</b> Тут ты смотришь корреляцию цены и цены)

# <div class="alert alert-success">
# <b>Комментарий ревьюера v 2.0 ✔️:</b> Хорошо

# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Но в целом, здорово, что анализируешь как линейную, так и нелинейную зависимость

# По полученым данные видим, что корреляция есть. Чем больше площадь, тем  выше стоимость. 

# In[42]:


data.pivot_table(index='living_area', values='last_price').plot(grid=True, style='o', figsize=(5, 5))
plt.show()
data['living_area'].corr(data['last_price'])


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> И диаграмма рассеяния наиболее подходящий график для анализа зависимости от площади

# есть некоторая зависимость от жилой площади и стоимости квартиры
# 

# In[43]:


data.pivot_table(index='kitchen_area', values='last_price').plot(grid=True, style='o', figsize=(5, 5))
plt.show()
data['kitchen_area'].corr(data['last_price'])


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Здесь зависимость пониже

# Есть некоторая зависимость от площади кухни и стоимости квадратного метра
# 

# In[44]:


data.pivot_table(index='rooms', values='last_price').plot(grid=True, style='-', figsize=(5, 5))
plt.show()
data['rooms'].corr(data['last_price'])


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Хорошо, что тут и далее используешь именно линейные графики по средним значениям

# Низкая зависимость
# 

# In[45]:


data.pivot_table(index='floor_type', values='last_price').plot(grid=True, style='-', figsize=(5, 5))
plt.show()


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Довольно ожидаемо

# По графику хорошо видно, что квартиры на первом этаже дешевле, чем все остальные варианты
# 

# In[46]:


data.pivot_table(index='weekday', values='last_price').plot(grid=True, style='-', figsize=(5, 5))
plt.show()


# <div class="alert alert-danger">
# <b>Комментарий ревьюера ❌:</b> Не совсем корректно смотреть на корреляцию в временных показателях, ведь это фактически категорийные данные, а корреляция Пирсона подходит только для числовых непрерывных данных

# <div class="alert alert-success">
# <b>Комментарий ревьюера v 2.0 ✔️:</b> Исправлено

# Дороже всего в  субботу, а в воскресенье дешевле.

# In[47]:


data.pivot_table(index='month', values='last_price').plot(grid=True, style='-', figsize=(5, 5))
plt.show()
data['month'].corr(data['last_price'])


# Видим скачки в январе, мае, июле, сентябре и самый дорогой месяц январь, в остальных месяцах некоторый провал. Сезонности как таковой не вижу

# In[48]:


data.pivot_table(index='year', values='last_price').plot(grid=True, style='-', figsize=(5, 5))
plt.show()


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Все зависимости от временных показателей разобраны

# Падение после 2014 года связано с кризисом экономическим насколько я понимаю 

# In[49]:


locality_10 = data['locality_name'].value_counts().head(10)
locality_10


# In[50]:


locality_sqr_metre_price = data.query('locality_name in @locality_10.index ').pivot_table(values='sqr_metre_price', index='locality_name')
locality_sqr_metre_price = locality_sqr_metre_price.astype('int')
locality_sqr_metre_price.sort_values('sqr_metre_price', ascending=False)


# Из 10 самых популярных населеных пунктов по количеству объявлений Санкт-Петербург самый дорогой , а Выборг- дешевый

# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Ты правильно ответил на вопрос задания!

# In[51]:


data['cityCenters_nearest_km'].head()


# In[56]:


centre_km = data.query('locality_name == "санкт-петербург" and cityCenters_nearest_km!=0').pivot_table(index = 'cityCenters_nearest_km', values = 'sqr_metre_price', aggfunc = 'mean')
centre_km.plot(grid=True, style='o-', xlim=(0,15), figsize=(10, 5))
centre_km


# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Средние цены по километрам также посчитаны как надо, класс!

# Снижение стоимости квадратного метра идет примерно после 7 километра. Чем ближе к центру , тем дороже цена квадратного метра

# ## Вывод

# Мы обработали данные сервиса Яндекс.Недвижимость. Изменили типы данных, избавились от пропусков, проанализировали выбивающие значения. Мы высчитали и добавили новые столбцы для анализа, а именно цену квадратного метра, день, месяц и год создания объявлений. Узнали что средний метраж продаваемых квартир около 60 м. Также убедились что больше всего на увелечение стоимости квартиры влияет общая площадь и удаленность от центра, а на уменьшения этажность, ведь квартиры на 1 этаже значительно дешевле.

# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Супер, хорошие выводы по проекту

# <div class="alert alert-success">
# <b>Комментарий ревьюера ✔️:</b> Сергей, проект отличный! У тебя очень сильные аналитические навыки и владение инструментами для проведения исследования. Но всё же в проекте есть несколько замечаний и я попрошу тебя исправить их, чтобы он стал еще лучше! </div>

# **Чек-лист готовности проекта**
# 
# Поставьте 'x' в выполненных пунктах. Далее нажмите Shift+Enter.

# - [x]  открыт файл
# - [x]  файлы изучены (выведены первые строки, метод `info()`, гистограммы и т.д.)
# - [x]  определены пропущенные значения
# - [x]  заполнены пропущенные значения там, где это возможно
# - [x]  есть пояснение, какие пропущенные значения обнаружены
# - [x]  изменены типы данных
# - [x]  есть пояснение, в каких столбцах изменены типы и почему
# - [x]  устранены неявные дубликаты в названиях населённых пунктов
# - [x]  устранены редкие и выбивающиеся значения (аномалии) во всех столбцах
# - [x]  посчитано и добавлено в таблицу: цена одного квадратного метра
# - [x]  посчитано и добавлено в таблицу: день публикации объявления (0 - понедельник, 1 - вторник и т.д.)
# - [x]  посчитано и добавлено в таблицу: месяц публикации объявления
# - [x]  посчитано и добавлено в таблицу: год публикации объявления
# - [x]  посчитано и добавлено в таблицу: тип этажа квартиры (значения — «первый», «последний», «другой»)
# - [x]  посчитано и добавлено в таблицу: расстояние в км до центра города
# - [x]  изучены и описаны следующие параметры:
#         - общая площадь;
#         - жилая площадь;
#         - площадь кухни;
#         - цена объекта;
#         - количество комнат;
#         - высота потолков;
#         - этаж квартиры;
#         - тип этажа квартиры («первый», «последний», «другой»);
#         - общее количество этажей в доме;
#         - расстояние до центра города в метрах;
#         - расстояние до ближайшего аэропорта;
#         - расстояние до ближайшего парка;
#         - день и месяц публикации объявления
# - [x]  построены гистограммы для каждого параметра
# - [x]  выполнено задание: "Изучите, как быстро продавались квартиры (столбец days_exposition). Этот параметр показывает, сколько дней «висело» каждое объявление.
#     - Постройте гистограмму.
#     - Посчитайте среднее и медиану.
#     - В ячейке типа markdown опишите, сколько обычно занимает продажа. Какие продажи можно считать быстрыми, а какие — необычно долгими?"
# - [x]  выполнено задание: "Какие факторы больше всего влияют на общую (полную) стоимость объекта? Постройте графики, которые покажут зависимость цены от указанных ниже параметров. Для подготовки данных перед визуализацией вы можете использовать сводные таблицы."
#         - общей площади;
#         - жилой площади;
#         - площади кухни;
#         - количество комнат;
#         - типа этажа, на котором расположена квартира (первый, последний, другой);
#         - даты размещения (день недели, месяц, год);
# - [x]  выполнено задание: "Посчитайте среднюю цену одного квадратного метра в 10 населённых пунктах с наибольшим числом объявлений. Выделите населённые пункты с самой высокой и низкой стоимостью квадратного метра. Эти данные можно найти по имени в столбце `locality_name`."
# - [x]  выполнено задание: "Ранее вы посчитали расстояние до центра в километрах. Теперь выделите квартиры в Санкт-Петербурге с помощью столбца `locality_name` и вычислите среднюю цену каждого километра. Опишите, как стоимость объектов зависит от расстояния до центра города."
# - [x]  в каждом этапе есть промежуточные выводы
# - [x]  есть общий вывод
